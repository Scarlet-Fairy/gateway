syntax = "proto3";
package protobuf;
option go_package = "github.com/Scarlet-Fairy/gateway/pb";

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Scarlet-Fairy"
    version: "1.0";
  };
  external_docs: {
    url: "https://github.com/Scarlet-Fairy";
    description: "Scarlet Fairy repository";
  }
  schemes: HTTP;
};

/*
  Log Watcher
 */
service LogWatcher {
  rpc GetLogs(GetLogsRequest) returns (GetLogsResponse) {
    option (google.api.http) = {
      get: "/api/v1/logs"
    };
  }
}

message GetLogsRequest {
  string deploy_id = 1;
  uint32 offset = 2;
  uint32 size = 3;
}

message Log {
  string timestamp = 1;
  string body = 2;
}

message GetLogsResponse {
  repeated Log logs = 1;
}

/*
  Manager
 */
service Manager {
  rpc Deploy(DeployRequest) returns (DeployResponse) {
    option (google.api.http) = {
      post: "/api/v1/manager"
      body: "*"
    };
  }
  rpc Destroy(DestroyRequest) returns (DestroyResponse) {
    option (google.api.http) = {
      delete: "/api/v1/manager"
    };
  }
  rpc GetDeploy(GetDeployRequest) returns (GetDeployResponse) {
    option (google.api.http) = {
      get: "/api/v1/job"
    };
  }

  rpc ListDeploys(ListDeploysRequest) returns (ListDeploysResponse) {
    option (google.api.http) = {
      get: "/api/v1/jobs"
    };
  }
}

message Build {
  string job_id = 1;
  string job_name = 2;
  string image_name = 3;

  enum Status {
    UNKNOWN_STATUS  = 0;
    ERROR           = 1;
    LOADING         = 2;
    COMPLETED       = 3;
  }
  Status status = 4;

  message BuildStep {
    enum Step {
      UNKNOWN_STEP  = 0;
      CLONE         = 1;
      BUILD         = 2;
      PUSH          = 3;
    }

    Step step = 1;
    string error = 2;
  }
  repeated BuildStep steps = 5;
}

message Workload {
  string job_id = 1;
  string job_name = 2;
  map<string, string> envs = 3;
  string url = 4;
}

message Deploy {
  string id = 1;
  string name = 2;
  string git_repo = 3;

  Build build = 4;
  Workload workload = 5;
}

message DeployRequest {
  string git_repo = 1;
  string name = 2;
  map<string, string> envs = 3;
}

message DeployResponse {
  string deploy_id = 1;
}

message DestroyRequest {
  string deploy_id = 1;
}

message DestroyResponse {}

message GetDeployRequest {
  string deploy_id = 1;
}

message GetDeployResponse {
  Deploy deploy = 1;
}

message ListDeploysRequest {}

message ListDeploysResponse {
  repeated Deploy deploys = 1;
}